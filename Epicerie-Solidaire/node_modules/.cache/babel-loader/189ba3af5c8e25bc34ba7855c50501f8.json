{"ast":null,"code":"var _jsxFileName = \"/Users/yoannlabbe/Projet/my-app/PLANT-FLOWER-FRONT/src/Connected/Connexion.jsx\",\n    _s = $RefreshSig$();\n\n// Page de connexion\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport * as Yup from \"yup\";\nimport FormFormik from \"../Common/FormFormik\";\nimport ConnectField from \"./ConnectField\";\nimport axios from \"axios\";\nimport UserContext from \"../Context/UserContext\";\nimport GoogleLogin from \"react-google-login\";\nimport ReactFacebookLogin from \"react-facebook-login\";\nimport { useHistory } from \"react-router-dom\";\nimport { Grid } from \"@mui/material\";\nimport { useCookies } from 'react-cookie';\nimport PopupPassword from './PopupPassword';\nimport ButtonFormik from \"../Common/ButtonFormik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  connect: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    marginTop: \"45px\"\n  },\n  click: {\n    marginTop: \"10px\",\n    marginBottom: \"15px\"\n  },\n  button: {\n    borderRadius: \"25px\",\n    backgroundColor: \"#D5D82C\",\n    color: \"black\",\n    width: \"13%\",\n    height: \"50px\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    marginRight: \"10px\",\n    marginLeft: \"15px\"\n  }\n}));\nexport default function Connexion(props) {\n  _s();\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().required(\"Veuillez saisir votre adresse mail\"),\n    password: Yup.string().required(\"Veuillez saisir votre mot de passe\")\n  });\n  const {\n    connectedUser,\n    setConnectedUser\n  } = useContext(UserContext);\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const history = useHistory(); // creation d'un cookie\n\n  const [cookies, setCookies] = useCookies([\"token\"]);\n  const expiredAt = 60; // fonction pour se connecter \n\n  const handleConnection = async values => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}create/login`, values, {\n        withCredentials: true\n      });\n\n      if (response.data) {\n        // pour qu'il expire apres 1h\n        let date = new Date();\n        date.setTime(date.getTime() + expiredAt * 60 * 1000); // on va mettre le token dans le cookie pour verifier si la personne est connectÃ© a chaque fois dans tout le site \n\n        setCookies(\"token\", response.data.token, {\n          path: \"/\",\n          expires: date\n        });\n        props.connect(true);\n        history.push(\"/\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.connect,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: \"100px\",\n          height: \"100px\"\n        },\n        src: \"\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormFormik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      validationSchema: validationSchema,\n      onSubmit: handleConnection,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: \"#D5D82C\"\n        },\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Mot de passe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n        style: {\n          width: \"13%\",\n          height: \"50px\"\n        },\n        title: \"Connexion\",\n        type: \"button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginTop: \"2%\",\n          marginBottom: \"4%\",\n          paddingRight: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button,\n          href: \"/inscription\",\n          children: \"Pas encore inscrit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PopupPassword, {\n          open: open,\n          handleClose: handleClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Connexion, \"ockuGkrFwM3nwSwUSIWA1vUJaws=\", false, function () {\n  return [useStyles, useHistory, useCookies];\n});\n\n_c = Connexion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connexion\");","map":{"version":3,"sources":["/Users/yoannlabbe/Projet/my-app/PLANT-FLOWER-FRONT/src/Connected/Connexion.jsx"],"names":["Button","makeStyles","React","useContext","Yup","FormFormik","ConnectField","axios","UserContext","GoogleLogin","ReactFacebookLogin","useHistory","Grid","useCookies","PopupPassword","ButtonFormik","useStyles","theme","connect","display","justifyContent","flexDirection","alignItems","margin","marginTop","click","marginBottom","button","borderRadius","backgroundColor","color","width","height","marginRight","marginLeft","Connexion","props","validationSchema","object","shape","email","string","required","password","connectedUser","setConnectedUser","classes","open","setOpen","useState","history","cookies","setCookies","expiredAt","handleConnection","values","response","post","process","env","REACT_APP_API_BASE_URL","withCredentials","data","date","Date","setTime","getTime","token","path","expires","push","error","console","log","handleClose","paddingRight"],"mappings":"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","sourcesContent":["// Page de connexion\r\n\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport FormFormik from \"../Common/FormFormik\";\r\nimport ConnectField from \"./ConnectField\";\r\nimport axios from \"axios\";\r\nimport UserContext from \"../Context/UserContext\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport ReactFacebookLogin from \"react-facebook-login\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useCookies } from 'react-cookie';\r\nimport PopupPassword from './PopupPassword';\r\nimport ButtonFormik from \"../Common/ButtonFormik\";\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  connect: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    marginTop: \"45px\",\r\n  },\r\n  click: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"15px\",\r\n  },\r\n  button: {\r\n    borderRadius: \"25px\",\r\n    backgroundColor: \"#D5D82C\",\r\n    color: \"black\",\r\n    width: \"13%\",\r\n    height: \"50px\",\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n    marginRight: \"10px\",\r\n    marginLeft: \"15px\"\r\n  },\r\n}));\r\nexport default function Connexion(props) {\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().required(\"Veuillez saisir votre adresse mail\"),\r\n    password: Yup.string().required(\"Veuillez saisir votre mot de passe\"),\r\n  });\r\n\r\n\r\n  const { connectedUser, setConnectedUser } = useContext(UserContext);\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const history = useHistory();\r\n  // creation d'un cookie\r\n  const [cookies, setCookies] = useCookies([\"token\"])\r\n  const expiredAt = 60\r\n  // fonction pour se connecter \r\n  const handleConnection = async (values) => {\r\n    try {\r\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}create/login`, values, {\r\n        withCredentials: true,\r\n      })\r\n\r\n      if (response.data) {\r\n        // pour qu'il expire apres 1h\r\n        let date = new Date();\r\n        date.setTime(date.getTime() + (expiredAt * 60 * 1000));\r\n        // on va mettre le token dans le cookie pour verifier si la personne est connectÃ© a chaque fois dans tout le site \r\n        setCookies(\"token\", response.data.token, { path: \"/\", expires: date })\r\n        props.connect(true)\r\n        history.push(\"/\")\r\n\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n\r\n    <div className={classes.connect}>\r\n\r\n      <div>\r\n        <img style={{ width: \"100px\", height: \"100px\" }} src={\"\"} alt=\"\" />\r\n      </div>\r\n      <FormFormik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleConnection}\r\n      >\r\n        <h1 style={{color:\"#D5D82C\"}}>Connexion</h1>\r\n        <ConnectField name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n        <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n        <ButtonFormik style={{ width: \"13%\", height: \"50px\" }} title=\"Connexion\" type=\"button\" />\r\n        <Grid container spacing={2} style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"2%\", marginBottom: \"4%\", paddingRight: 5 }}>\r\n          <Button className={classes.button} href=\"/inscription\">Pas encore inscrit</Button>\r\n          <PopupPassword open={open} handleClose={handleClose} />\r\n\r\n        </Grid>\r\n      </FormFormik>\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}