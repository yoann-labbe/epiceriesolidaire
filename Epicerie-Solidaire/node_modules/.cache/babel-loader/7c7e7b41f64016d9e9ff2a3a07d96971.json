{"ast":null,"code":"var _jsxFileName = \"/Users/yoannlabbe/Projet/my-app/PLANT-FLOWER-FRONT/src/Password/PasswordReset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from \"axios\";\nimport ButtonFormik from \"../Common/ButtonFormik\";\nimport FormFormik from \"../Common/FormFormik\";\nimport ConnectField from \"../Connected/ConnectField\";\nimport { useParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  connect: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    marginTop: \"45px\"\n  },\n  click: {\n    marginTop: \"10px\",\n    marginBottom: \"15px\"\n  },\n  button: {\n    borderRadius: \"25px\",\n    backgroundColor: \"#33FF93\",\n    color: \"black\",\n    width: \"15%\",\n    height: \"50px\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\"\n  }\n}));\nexport default function PasswordReset() {\n  _s();\n\n  const classes = useStyles();\n  const validationSchema = Yup.object().shape({\n    password: Yup.string().required(\"Veuillez saisir votre nouveau mot de passe\"),\n    passwordConfirm: Yup.string().required(\"Veuillez confirmer votre nouveau mot de passe\")\n  });\n  const {\n    user\n  } = useParams();\n  const [confirmPassword, setConfirmPassword] = useState(false);\n  const [erreur, setErreur] = useState(true); // fonction pour le nouveau mot de passe \n\n  const confirmation = async values => {\n    try {\n      const {\n        password,\n        passwordConfirm\n      } = values;\n\n      if (password === passwordConfirm) {\n        const email = await axios.post(`${process.env.REACT_APP_API_BASE_URL}create/resetpassword/${user}`, {\n          password\n        }, {\n          withCredentials: true\n        });\n\n        if (email.data) {\n          setConfirmPassword(true);\n        }\n      } else {\n        setErreur(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (confirmPassword == false && erreur == true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FormFormik, {\n        initialValues: {\n          password: \"\",\n          passwordConfirm: \"\"\n        },\n        validationSchema: validationSchema,\n        onSubmit: confirmation,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Confirmer votre nouveau mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n          name: \"password\",\n          type: \"password\",\n          placeholder: \"Mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n          name: \"passwordConfirm\",\n          type: \"password\",\n          placeholder: \"Confirmer le Mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n          title: \"envoyer\",\n          type: \"button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  } else if (confirmPassword == true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Votre mot de passe a \\xE9t\\xE9 modifier vous pouvez vous connecter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        href: \"/connexion\",\n        children: \"connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  } else if (erreur == false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FormFormik, {\n        initialValues: {\n          password: \"\",\n          passwordConfirm: \"\"\n        },\n        validationSchema: validationSchema,\n        onSubmit: confirmation,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Confirmer votre nouveau mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"les mots de passe ne sont pas les m\\xEAmes veuiller recommencer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n          name: \"password\",\n          type: \"password\",\n          placeholder: \"Mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n          name: \"passwordConfirm\",\n          type: \"password\",\n          placeholder: \"Confirmer le Mot de passe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n          title: \"envoyer\",\n          type: \"button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(PasswordReset, \"86ZInqC5DZDr9ENnCGwG4o9FSkE=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = PasswordReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordReset\");","map":{"version":3,"names":["React","useState","axios","ButtonFormik","FormFormik","ConnectField","useParams","Yup","Button","makeStyles","useStyles","theme","connect","display","justifyContent","flexDirection","alignItems","margin","marginTop","click","marginBottom","button","borderRadius","backgroundColor","color","width","height","PasswordReset","classes","validationSchema","object","shape","password","string","required","passwordConfirm","user","confirmPassword","setConfirmPassword","erreur","setErreur","confirmation","values","email","post","process","env","REACT_APP_API_BASE_URL","withCredentials","data","error","console","log"],"sources":["/Users/yoannlabbe/Projet/my-app/PLANT-FLOWER-FRONT/src/Password/PasswordReset.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from \"axios\";\r\nimport ButtonFormik from \"../Common/ButtonFormik\";\r\nimport FormFormik from \"../Common/FormFormik\";\r\nimport ConnectField from \"../Connected/ConnectField\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    connect: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        margin: \"auto\",\r\n        marginTop: \"45px\",\r\n    },\r\n    click: {\r\n        marginTop: \"10px\",\r\n        marginBottom: \"15px\",\r\n    },\r\n    button: {\r\n        borderRadius: \"25px\",\r\n        backgroundColor: \"#33FF93\",\r\n        color: \"black\",\r\n        width: \"15%\",\r\n        height: \"50px\",\r\n        marginTop: \"10px\",\r\n        marginBottom: \"10px\",\r\n    },\r\n}));\r\n\r\nexport default function PasswordReset() {\r\n    const classes = useStyles();\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        password: Yup.string().required(\"Veuillez saisir votre nouveau mot de passe\"),\r\n        passwordConfirm: Yup.string().required(\"Veuillez confirmer votre nouveau mot de passe\"),\r\n\r\n    });\r\n    const { user } = useParams()\r\n\r\n    const [confirmPassword, setConfirmPassword] = useState(false)\r\n    const [erreur, setErreur] = useState(true)\r\n// fonction pour le nouveau mot de passe \r\n    const confirmation = async (values) => {\r\n        try {\r\n            const { password, passwordConfirm } = values\r\n\r\n            if (password === passwordConfirm) {\r\n                const email = await axios.post(`${process.env.REACT_APP_API_BASE_URL}create/resetpassword/${user}`, { password }, {\r\n                    withCredentials: true,\r\n                })\r\n                if (email.data) {\r\n                    setConfirmPassword(true)\r\n                }\r\n            } else {\r\n                setErreur(false)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    if (confirmPassword == false && erreur == true) {\r\n        return (\r\n            <div>\r\n\r\n                <FormFormik\r\n                    initialValues={{\r\n\r\n                        password: \"\",\r\n                        passwordConfirm: \"\",\r\n                    }}\r\n\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={confirmation}\r\n                >\r\n                    <h1>Confirmer votre nouveau mot de passe</h1>\r\n                    <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n                    <ConnectField name=\"passwordConfirm\" type=\"password\" placeholder=\"Confirmer le Mot de passe\" />\r\n\r\n                    <ButtonFormik title=\"envoyer\" type=\"button\" />\r\n\r\n                </FormFormik>\r\n            </div>\r\n        )\r\n    } else if (confirmPassword == true) {\r\n        return (\r\n            <div>\r\n                <h1>Votre mot de passe a été modifier vous pouvez vous connecter</h1>\r\n                <Button className={classes.button} href=\"/connexion\">connexion</Button>\r\n            </div>\r\n        )\r\n    } else if (erreur == false) {\r\n        return (\r\n            <div>\r\n\r\n                <FormFormik\r\n                    initialValues={{\r\n\r\n                        password: \"\",\r\n                        passwordConfirm: \"\",\r\n                    }}\r\n\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={confirmation}\r\n                >\r\n                    <h1>Confirmer votre nouveau mot de passe</h1>\r\n                    <h3>les mots de passe ne sont pas les mêmes veuiller recommencer</h3>\r\n                    <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n                    <ConnectField name=\"passwordConfirm\" type=\"password\" placeholder=\"Confirmer le Mot de passe\" />\r\n\r\n                    <ButtonFormik title=\"envoyer\" type=\"button\" />\r\n\r\n                </FormFormik>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}