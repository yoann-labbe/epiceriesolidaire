{"ast":null,"code":"var _jsxFileName = \"/Users/yoannlabbe/Projet/my-app/PLANT-FLOWER-FRONT/src/Profil/ModifyPassword.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport ButtonFormik from \"../Common/ButtonFormik\";\nimport FormFormik from \"../Common/FormFormik\";\nimport ConnectField from \"../Connected/ConnectField\";\nimport * as Yup from \"yup\";\nimport { useCookies } from 'react-cookie';\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  connect: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    marginTop: \"45px\"\n  },\n  click: {\n    marginTop: \"10px\",\n    marginBottom: \"15px\"\n  },\n  button: {\n    borderRadius: \"25px\",\n    backgroundColor: \"#33FF93\",\n    color: \"black\",\n    width: \"15%\",\n    height: \"50px\",\n    marginTop: \"10px\",\n    marginBottom: \"10px\"\n  }\n}));\nexport default function ModifyPassword() {\n  _s();\n\n  const classes = useStyles();\n  const validationSchema = Yup.object().shape({\n    password: Yup.string().required(\"Veuillez saisir votre  mot de passe actuel\")\n  });\n  const [confirmPassword, setConfirmPassword] = useState(false);\n  const [erreur, setErreur] = useState(false);\n  const [cookies, setCookies] = useCookies([\"token\"]);\n  const [verify, setVerify] = useState(\"false\");\n  const token = cookies.token;\n\n  const confirmation = async values => {\n    try {\n      // verification du mot de passe actuel\n      const passwords = await axios.post(`${process.env.REACT_APP_API_BASE_URL}create/modify/pass`, values, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }, {\n        withCredentials: true\n      });\n\n      if (passwords.data.message === \"You're now connected \") {\n        setConfirmPassword(true);\n      } else {\n        setErreur(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const modifypass = async values => {\n    try {\n      // modification du mot de passe \n      const {\n        password,\n        passwordConfirm\n      } = values;\n\n      if (password === passwordConfirm) {\n        const modifyPassword = await axios.patch(`${process.env.REACT_APP_API_BASE_URL}create/change`, values, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }, {\n          withCredentials: true\n        });\n\n        if (modifyPassword.data) {\n          setVerify(\"true\");\n        }\n      } else {\n        setVerify(\"erreur\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (confirmPassword == false) {\n    if (erreur == false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FormFormik, {\n          initialValues: {\n            password: \"\"\n          },\n          validationSchema: validationSchema,\n          onSubmit: confirmation,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Confirmer votre mot de passe actuel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n            title: \"envoyer\",\n            type: \"button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FormFormik, {\n          initialValues: {\n            password: \"\"\n          },\n          validationSchema: validationSchema,\n          onSubmit: confirmation,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Confirmer votre mot de passe actuel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Votre mot de passe n'est pas le bon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n            title: \"envoyer\",\n            type: \"button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this);\n    }\n  } else if (confirmPassword == true) {\n    const validationSchema = Yup.object().shape({\n      password: Yup.string().required(\"Veuillez saisir votre nouveau mot de passe\"),\n      passwordConfirm: Yup.string().required(\"Veuillez confirmer votre nouveau mot de passe\")\n    });\n\n    if (verify === \"false\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FormFormik, {\n          initialValues: {\n            password: \"\",\n            passwordConfirm: \"\"\n          },\n          validationSchema: validationSchema,\n          onSubmit: modifypass,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Confirmer votre nouveau mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n            name: \"passwordConfirm\",\n            type: \"password\",\n            placeholder: \"Confirmer le Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n            title: \"envoyer\",\n            type: \"button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this);\n    } else if (verify === \"true\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Votre mot de passe a \\xE9t\\xE9 modifier \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FormFormik, {\n          initialValues: {\n            password: \"\",\n            passwordConfirm: \"\"\n          },\n          validationSchema: validationSchema,\n          onSubmit: modifypass,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Confirmer votre nouveau mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"les mots de passe ne sont pas les m\\xEAmes veuiller recommencer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConnectField, {\n            name: \"passwordConfirm\",\n            type: \"password\",\n            placeholder: \"Confirmer le Mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ButtonFormik, {\n            title: \"envoyer\",\n            type: \"button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\n\n_s(ModifyPassword, \"QnbaTMvVWCXltKNXxeENUP4j/BE=\", false, function () {\n  return [useStyles, useCookies];\n});\n\n_c = ModifyPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModifyPassword\");","map":{"version":3,"sources":["/Users/yoannlabbe/Projet/my-app/PLANT-FLOWER-FRONT/src/Profil/ModifyPassword.jsx"],"names":["React","useState","useEffect","axios","ButtonFormik","FormFormik","ConnectField","Yup","useCookies","Button","makeStyles","useStyles","theme","connect","display","justifyContent","flexDirection","alignItems","margin","marginTop","click","marginBottom","button","borderRadius","backgroundColor","color","width","height","ModifyPassword","classes","validationSchema","object","shape","password","string","required","confirmPassword","setConfirmPassword","erreur","setErreur","cookies","setCookies","verify","setVerify","token","confirmation","values","passwords","post","process","env","REACT_APP_API_BASE_URL","headers","Authorization","withCredentials","data","message","error","console","log","modifypass","passwordConfirm","modifyPassword","patch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,KAAY;AACrCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,MADJ;AAELC,IAAAA,cAAc,EAAE,QAFX;AAGLC,IAAAA,aAAa,EAAE,QAHV;AAILC,IAAAA,UAAU,EAAE,QAJP;AAKLC,IAAAA,MAAM,EAAE,MALH;AAMLC,IAAAA,SAAS,EAAE;AANN,GAD4B;AASrCC,EAAAA,KAAK,EAAE;AACHD,IAAAA,SAAS,EAAE,MADR;AAEHE,IAAAA,YAAY,EAAE;AAFX,GAT8B;AAarCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,YAAY,EAAE,MADV;AAEJC,IAAAA,eAAe,EAAE,SAFb;AAGJC,IAAAA,KAAK,EAAE,OAHH;AAIJC,IAAAA,KAAK,EAAE,KAJH;AAKJC,IAAAA,MAAM,EAAE,MALJ;AAMJR,IAAAA,SAAS,EAAE,MANP;AAOJE,IAAAA,YAAY,EAAE;AAPV;AAb6B,CAAZ,CAAD,CAA5B;AAwBA,eAAe,SAASO,cAAT,GAA0B;AAAA;;AACrC,QAAMC,OAAO,GAAGlB,SAAS,EAAzB;AACA,QAAMmB,gBAAgB,GAAGvB,GAAG,CAACwB,MAAJ,GAAaC,KAAb,CAAmB;AAExCC,IAAAA,QAAQ,EAAE1B,GAAG,CAAC2B,MAAJ,GAAaC,QAAb,CAAsB,4CAAtB;AAF8B,GAAnB,CAAzB;AAQA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCpC,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACqC,MAAD,EAASC,SAAT,IAAsBtC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACuC,OAAD,EAAUC,UAAV,IAAwBjC,UAAU,CAAC,CAAC,OAAD,CAAD,CAAxC;AACA,QAAM,CAACkC,MAAD,EAASC,SAAT,IAAsB1C,QAAQ,CAAC,OAAD,CAApC;AACA,QAAM2C,KAAK,GAAGJ,OAAO,CAACI,KAAtB;;AAGA,QAAMC,YAAY,GAAG,MAAOC,MAAP,IAAkB;AACnC,QAAI;AACA;AAEA,YAAMC,SAAS,GAAG,MAAM5C,KAAK,CAAC6C,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAuB,oBAAjD,EAAsEL,MAAtE,EAA8E;AAAEM,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAAST,KAAM;AAAjC;AAAX,OAA9E,EAAiI;AACrJU,QAAAA,eAAe,EAAE;AADoI,OAAjI,CAAxB;;AAIA,UAAIP,SAAS,CAACQ,IAAV,CAAeC,OAAf,KAA2B,uBAA/B,EAAwD;AACpDnB,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,OAFD,MAEO;AACHE,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AAGJ,KAdD,CAcE,OAAOkB,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAlBD;;AAoBA,QAAMG,UAAU,GAAG,MAAOd,MAAP,IAAkB;AACjC,QAAI;AACA;AACA,YAAM;AAAEb,QAAAA,QAAF;AAAY4B,QAAAA;AAAZ,UAAgCf,MAAtC;;AACA,UAAIb,QAAQ,KAAK4B,eAAjB,EAAkC;AAC9B,cAAMC,cAAc,GAAG,MAAM3D,KAAK,CAAC4D,KAAN,CAAa,GAAEd,OAAO,CAACC,GAAR,CAAYC,sBAAuB,eAAlD,EAAkEL,MAAlE,EAA0E;AAAEM,UAAAA,OAAO,EAAE;AAAEC,YAAAA,aAAa,EAAG,UAAST,KAAM;AAAjC;AAAX,SAA1E,EAA6H;AACtJU,UAAAA,eAAe,EAAE;AADqI,SAA7H,CAA7B;;AAGA,YAAIQ,cAAc,CAACP,IAAnB,EAAyB;AACrBZ,UAAAA,SAAS,CAAC,MAAD,CAAT;AACH;AACJ,OAPD,MAOO;AACHA,QAAAA,SAAS,CAAC,QAAD,CAAT;AACH;AAEJ,KAdD,CAcE,OAAOc,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAlBD;;AAqBA,MAAIrB,eAAe,IAAI,KAAvB,EAA8B;AAC1B,QAAIE,MAAM,IAAI,KAAd,EAAqB;AACjB,0BACI;AAAA,+BAEI,QAAC,UAAD;AACI,UAAA,aAAa,EAAE;AAEXL,YAAAA,QAAQ,EAAE;AAFC,WADnB;AAOI,UAAA,gBAAgB,EAAEH,gBAPtB;AAQI,UAAA,QAAQ,EAAEe,YARd;AAAA,kCAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAWI,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,IAAI,EAAC,UAAnC;AAA8C,YAAA,WAAW,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAcI,QAAC,YAAD;AAAc,YAAA,KAAK,EAAC,SAApB;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAsBH,KAvBD,MAuBO;AACH,0BACI;AAAA,+BAEI,QAAC,UAAD;AACI,UAAA,aAAa,EAAE;AAEXZ,YAAAA,QAAQ,EAAE;AAFC,WADnB;AAOI,UAAA,gBAAgB,EAAEH,gBAPtB;AAQI,UAAA,QAAQ,EAAEe,YARd;AAAA,kCAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAYI,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,IAAI,EAAC,UAAnC;AAA8C,YAAA,WAAW,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,kBAZJ,eAeI,QAAC,YAAD;AAAc,YAAA,KAAK,EAAC,SAApB;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAuBH;AACJ,GAjDD,MAiDO,IAAIT,eAAe,IAAI,IAAvB,EAA6B;AAGhC,UAAMN,gBAAgB,GAAGvB,GAAG,CAACwB,MAAJ,GAAaC,KAAb,CAAmB;AAExCC,MAAAA,QAAQ,EAAE1B,GAAG,CAAC2B,MAAJ,GAAaC,QAAb,CAAsB,4CAAtB,CAF8B;AAGxC0B,MAAAA,eAAe,EAAEtD,GAAG,CAAC2B,MAAJ,GAAaC,QAAb,CAAsB,+CAAtB;AAHuB,KAAnB,CAAzB;;AAMA,QAAIO,MAAM,KAAK,OAAf,EAAwB;AAEpB,0BACI;AAAA,+BAEI,QAAC,UAAD;AACI,UAAA,aAAa,EAAE;AAEXT,YAAAA,QAAQ,EAAE,EAFC;AAGX4B,YAAAA,eAAe,EAAE;AAHN,WADnB;AAOI,UAAA,gBAAgB,EAAE/B,gBAPtB;AAQI,UAAA,QAAQ,EAAE8B,UARd;AAAA,kCAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAWI,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,IAAI,EAAC,UAAnC;AAA8C,YAAA,WAAW,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAYI,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,iBAAnB;AAAqC,YAAA,IAAI,EAAC,UAA1C;AAAqD,YAAA,WAAW,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA,kBAZJ,eAcI,QAAC,YAAD;AAAc,YAAA,KAAK,EAAC,SAApB;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAsBH,KAxBD,MAwBO,IAAIlB,MAAM,KAAK,MAAf,EAAuB;AAC1B,0BACI;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAPM,MAOA;AACH,0BACI;AAAA,+BAEI,QAAC,UAAD;AACI,UAAA,aAAa,EAAE;AAEXT,YAAAA,QAAQ,EAAE,EAFC;AAGX4B,YAAAA,eAAe,EAAE;AAHN,WADnB;AAOI,UAAA,gBAAgB,EAAE/B,gBAPtB;AAQI,UAAA,QAAQ,EAAE8B,UARd;AAAA,kCAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAYI,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,IAAI,EAAC,UAAnC;AAA8C,YAAA,WAAW,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,kBAZJ,eAaI,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,iBAAnB;AAAqC,YAAA,IAAI,EAAC,UAA1C;AAAqD,YAAA,WAAW,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA,kBAbJ,eAeI,QAAC,YAAD;AAAc,YAAA,KAAK,EAAC,SAApB;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAuBH;AACJ;AACJ;;GA7KuBhC,c;UACJjB,S,EAWcH,U;;;KAZVoB,c","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport ButtonFormik from \"../Common/ButtonFormik\";\r\nimport FormFormik from \"../Common/FormFormik\";\r\nimport ConnectField from \"../Connected/ConnectField\";\r\nimport * as Yup from \"yup\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    connect: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        margin: \"auto\",\r\n        marginTop: \"45px\",\r\n    },\r\n    click: {\r\n        marginTop: \"10px\",\r\n        marginBottom: \"15px\",\r\n    },\r\n    button: {\r\n        borderRadius: \"25px\",\r\n        backgroundColor: \"#33FF93\",\r\n        color: \"black\",\r\n        width: \"15%\",\r\n        height: \"50px\",\r\n        marginTop: \"10px\",\r\n        marginBottom: \"10px\",\r\n    },\r\n}));\r\n\r\nexport default function ModifyPassword() {\r\n    const classes = useStyles();\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        password: Yup.string().required(\"Veuillez saisir votre  mot de passe actuel\"),\r\n\r\n\r\n    });\r\n\r\n\r\n    const [confirmPassword, setConfirmPassword] = useState(false)\r\n    const [erreur, setErreur] = useState(false)\r\n    const [cookies, setCookies] = useCookies([\"token\"])\r\n    const [verify, setVerify] = useState(\"false\")\r\n    const token = cookies.token\r\n\r\n\r\n    const confirmation = async (values) => {\r\n        try {\r\n            // verification du mot de passe actuel\r\n\r\n            const passwords = await axios.post(`${process.env.REACT_APP_API_BASE_URL}create/modify/pass`, values, { headers: { Authorization: `Bearer ${token}` } }, {\r\n                withCredentials: true,\r\n            })\r\n\r\n            if (passwords.data.message === \"You're now connected \") {\r\n                setConfirmPassword(true)\r\n            } else {\r\n                setErreur(true)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const modifypass = async (values) => {\r\n        try {\r\n            // modification du mot de passe \r\n            const { password, passwordConfirm } = values\r\n            if (password === passwordConfirm) {\r\n                const modifyPassword = await axios.patch(`${process.env.REACT_APP_API_BASE_URL}create/change`, values, { headers: { Authorization: `Bearer ${token}` } }, {\r\n                    withCredentials: true,\r\n                })\r\n                if (modifyPassword.data) {\r\n                    setVerify(\"true\")\r\n                }\r\n            } else {\r\n                setVerify(\"erreur\")\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    if (confirmPassword == false) {\r\n        if (erreur == false) {\r\n            return (\r\n                <div>\r\n\r\n                    <FormFormik\r\n                        initialValues={{\r\n\r\n                            password: \"\"\r\n\r\n                        }}\r\n\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={confirmation}\r\n                    >\r\n                        <h1>Confirmer votre mot de passe actuel</h1>\r\n                        <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n\r\n\r\n                        <ButtonFormik title=\"envoyer\" type=\"button\" />\r\n\r\n                    </FormFormik>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n\r\n                    <FormFormik\r\n                        initialValues={{\r\n\r\n                            password: \"\"\r\n\r\n                        }}\r\n\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={confirmation}\r\n                    >\r\n                        <h1>Confirmer votre mot de passe actuel</h1>\r\n                        <h3>Votre mot de passe n'est pas le bon</h3>\r\n                        <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n\r\n\r\n                        <ButtonFormik title=\"envoyer\" type=\"button\" />\r\n\r\n                    </FormFormik>\r\n                </div>\r\n            )\r\n        }\r\n    } else if (confirmPassword == true) {\r\n\r\n\r\n        const validationSchema = Yup.object().shape({\r\n\r\n            password: Yup.string().required(\"Veuillez saisir votre nouveau mot de passe\"),\r\n            passwordConfirm: Yup.string().required(\"Veuillez confirmer votre nouveau mot de passe\"),\r\n\r\n        });\r\n        if (verify === \"false\") {\r\n\r\n            return (\r\n                <div>\r\n\r\n                    <FormFormik\r\n                        initialValues={{\r\n\r\n                            password: \"\",\r\n                            passwordConfirm: \"\",\r\n                        }}\r\n\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={modifypass}\r\n                    >\r\n                        <h1>Confirmer votre nouveau mot de passe</h1>\r\n                        <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n                        <ConnectField name=\"passwordConfirm\" type=\"password\" placeholder=\"Confirmer le Mot de passe\" />\r\n\r\n                        <ButtonFormik title=\"envoyer\" type=\"button\" />\r\n\r\n                    </FormFormik>\r\n                </div>\r\n            )\r\n        } else if (verify === \"true\") {\r\n            return (\r\n                <div>\r\n                    <h1>Votre mot de passe a été modifier </h1>\r\n\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n\r\n                    <FormFormik\r\n                        initialValues={{\r\n\r\n                            password: \"\",\r\n                            passwordConfirm: \"\",\r\n                        }}\r\n\r\n                        validationSchema={validationSchema}\r\n                        onSubmit={modifypass}\r\n                    >\r\n                        <h1>Confirmer votre nouveau mot de passe</h1>\r\n                        <h3>les mots de passe ne sont pas les mêmes veuiller recommencer</h3>\r\n                        <ConnectField name=\"password\" type=\"password\" placeholder=\"Mot de passe\" />\r\n                        <ConnectField name=\"passwordConfirm\" type=\"password\" placeholder=\"Confirmer le Mot de passe\" />\r\n\r\n                        <ButtonFormik title=\"envoyer\" type=\"button\" />\r\n\r\n                    </FormFormik>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}